# -*- coding: utf-8 -*-
"""NLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/102aUU2-4FKqIN_3fsoHiB0PSfxBqDNOg
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

plt.style.use('ggplot')

import nltk
nltk.download('punkt_tab')
nltk.download('averaged_perceptron_tagger_eng')
nltk.download('maxent_ne_chunker_tab')
nltk.download('words')

# read data from the file

df = pd.read_csv('/content/Reviews.csv')
df = df.head(500)
# working with a 500-review dataset

ax = df['Score'].value_counts().sort_index().plot(kind = 'bar', title ='Numar review-uri dupa rating', figsize = (10, 5))
ax.set_xlabel('Review-uri')
plt.show()

example = df['Text'][50]
print(example)

tokens = nltk.word_tokenize(example)
 tokens[:10]
 #tokenizing the example text

tagged = nltk.pos_tag(tokens)
tagged[:10]

# every word is assigned a token

entities = nltk.chunk.ne_chunk(tagged)
entities.pprint()

# This model does a math equation on all the given words
# Each given word is assigned a number based on if the word is positive or negative
# These are combined to a total score that decides the rating of the comment
# Connecting words such as 'the, in , of...' are not taken into consideration

# This does not account for relationship between words

from nltk.sentiment import SentimentIntensityAnalyzer
from tqdm.notebook import tqdm
nltk.download('vader_lexicon')

sia = SentimentIntensityAnalyzer()

sia.polarity_scores('I am very happy about this product')

sia.polarity_scores('This is the worst product')

sia.polarity_scores(example)

# Run the polarity scores on the whole dataset
res = {}
for i,row in tqdm(df.iterrows(), total = len (df)):
   text = row['Text']
   myid = row['Id']
   res[myid] = sia.polarity_scores(text)

model1 = pd.DataFrame(res).T

model1 = model1.reset_index().rename(columns= {'index': 'Id'})

model1 = model1.merge(df,how = 'left')

model1.head()

ax = sns.barplot(data = model1, x= 'Score' , y = 'compound')
ax.set_title('Compound Score by Stars')
plt.show()

#So we can see that this model actually validates the correlation
# between the compound score and the stars given in the rating.

fig, axs = plt.subplots (1,3 , figsize = (15,5))

sns.barplot(data = model1, x='Score', y='pos', ax = axs[0])

sns.barplot(data = model1, x='Score', y='neu', ax = axs[1])

sns.barplot(data = model1, x='Score', y='neg', ax = axs[2])

axs[0].set_title('Positive')
axs[1].set_title('Neutral')
axs[2].set_title('Negative')
plt.show()

# Further showing that the connection between the text and the score is relatable

from transformers import AutoTokenizer
from transformers import AutoModelForSequenceClassification
from scipy.special import softmax

# Pretrained model

MODEL = f"cardiffnlp/twitter-roberta-base-sentiment"
tokenizer = AutoTokenizer.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)

# Let's test the models on the given example

#Run for the Model 1
print(example)
sia.polarity_scores(example)

# Run for the Model 2

encoded_text = tokenizer(example,return_tensors= 'pt')
output = model(**encoded_text)
scores = output[0][0].detach().numpy()
scores = softmax(scores)

scores_dict = {
    "model2_neg" : scores[0],
    "model2_neu" : scores[1],
    "model2_pos" : scores[2]

}
print(scores_dict)

def polarity_scores_model2(example):
    encoded_text = tokenizer(example,return_tensors= 'pt')
    output = model(**encoded_text)
    scores = output[0][0].detach().numpy()
    scores = softmax(scores)

    scores_dict = {
        "model2_neg" : scores[0],
        "model2_neu" : scores[1],
        "model2_pos" : scores[2]

    }
    return scores_dict

# Run both the models on the dataset
res = {}
for i,row in tqdm(df.iterrows(), total = len (df)):
  try:
    text = row['Text']
    myid = row['Id']
    model1_result = sia.polarity_scores(text)

    model2_result = polarity_scores_model2(text)

    both_result = {**model1_result, **model2_result}

    res[myid] = both_result
  except RuntimeError:
    print(f'Text is too big for the model to hande at id {myid}')

both_result

results_df = pd.DataFrame(res).T
results_df = results_df.reset_index().rename(columns = {'index' :  'Id'})
results_df = results_df.merge(df,how = 'left')

results_df.head()

# Comparing scores between the two models

results_df.columns

sns.pairplot(data = results_df , vars = ['neg', 'neu', 'pos', 'compound', 'model2_neg', 'model2_neu',
       'model2_pos'],
             hue = 'Score',
             palette = 'tab10'
             )
plt.show()